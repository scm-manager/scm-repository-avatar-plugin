/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.cloudogu.repositoryavatar;

import com.google.inject.util.Providers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import sonia.scm.api.v2.resources.HalAppender;
import sonia.scm.api.v2.resources.HalEnricherContext;
import sonia.scm.api.v2.resources.ScmPathInfoStore;
import sonia.scm.repository.Repository;
import sonia.scm.repository.RepositoryTestData;

import java.net.URI;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class RepositoryEmbeddedEnricherTest {

  private static final Repository REPOSITORY = RepositoryTestData.createHeartOfGold();

  @Mock
  private AvatarStore avatarStore;

  private final AvatarMapper avatarMapper = new AvatarMapperImpl();

  private RepositoryEmbeddedEnricher enricher;

  @Mock
  private HalEnricherContext context;
  @Mock
  private HalAppender appender;

  @BeforeEach
  void init() {
    when(context.oneRequireByType(Repository.class)).thenReturn(REPOSITORY);
    ScmPathInfoStore scmPathInfoStore = new ScmPathInfoStore();
    scmPathInfoStore.set(() -> URI.create("/scm/api/"));
    avatarMapper.scmPathInfoStore = Providers.of(scmPathInfoStore);
    enricher = new RepositoryEmbeddedEnricher(avatarStore, avatarMapper);
  }

  @Test
  void shouldEnrichAutoGeneratedAvatar() {
    when(avatarStore.getAvatar(REPOSITORY)).thenReturn(Avatar.autoGenerated());

    enricher.enrich(context, appender);

    verify(appender).appendEmbedded(eq("avatar"), (AvatarDto) argThat(avatar -> {
      assertThat(((AvatarDto) avatar).getType()).isEqualTo(AvatarType.AUTO_GENERATED);
      return true;
    }));
  }

  @Test
  void shouldEnrichPredefinedAvatar() {
    when(avatarStore.getAvatar(REPOSITORY)).thenReturn(Avatar.predefined("fish", "blue"));

    enricher.enrich(context, appender);

    verify(appender).appendEmbedded(eq("avatar"), (AvatarDto) argThat(avatar -> {
      assertThat(((AvatarDto) avatar).getType()).isEqualTo(AvatarType.PREDEFINED);
      return true;
    }));
  }

  @Test
  void shouldEnrichUploadedAvatar() {
    when(avatarStore.getAvatar(REPOSITORY)).thenReturn(Avatar.uploaded("fish".getBytes(), "png"));

    enricher.enrich(context, appender);

    verify(appender).appendEmbedded(eq("avatar"), (AvatarDto) argThat(dto -> {
      assertThat(((AvatarDto) dto).getLinks().getLinkBy("avatar").get().getHref())
        .isEqualTo("/scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/uploaded");
      assertThat(((AvatarDto) dto).getType()).isEqualTo(AvatarType.UPLOADED);
      return true;
    }));
  }
}
