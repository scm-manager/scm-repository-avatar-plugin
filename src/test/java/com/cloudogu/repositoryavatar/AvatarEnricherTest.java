/*
 * Copyright (c) 2020 - present Cloudogu GmbH
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/.
 */

package com.cloudogu.repositoryavatar;

import com.google.inject.util.Providers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import sonia.scm.api.v2.resources.HalAppender;
import sonia.scm.api.v2.resources.ScmPathInfoStore;
import sonia.scm.repository.Repository;
import sonia.scm.repository.RepositoryTestData;

import java.net.URI;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.argThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class AvatarEnricherTest {

  private static final Repository REPOSITORY = RepositoryTestData.createHeartOfGold();

  @Mock
  private AvatarStore avatarStore;

  private final AvatarMapper avatarMapper = new AvatarMapperImpl();

  private AvatarEnricher enricher;

  @Mock
  private HalAppender appender;

  @BeforeEach
  void init() {
    ScmPathInfoStore scmPathInfoStore = new ScmPathInfoStore();
    scmPathInfoStore.set(() -> URI.create("/scm/api/"));
    avatarMapper.scmPathInfoStore = Providers.of(scmPathInfoStore);
    enricher = new AvatarEnricher(avatarStore, avatarMapper);
  }

  @Test
  void shouldEnrichAutoGeneratedAvatar() {
    when(avatarStore.getAvatar(REPOSITORY)).thenReturn(Avatar.autoGenerated());

    enricher.enrich(appender, REPOSITORY);

    verify(appender).appendEmbedded(eq("avatar"), (AvatarDto) argThat(avatar -> {
      assertThat(((AvatarDto) avatar).getType()).isEqualTo(AvatarType.AUTO_GENERATED);
      return true;
    }));
  }

  @Test
  void shouldEnrichPredefinedAvatar() {
    when(avatarStore.getAvatar(REPOSITORY)).thenReturn(Avatar.predefined("fish", "blue"));

    enricher.enrich(appender, REPOSITORY);

    verify(appender).appendEmbedded(eq("avatar"), (AvatarDto) argThat(avatar -> {
      assertThat(((AvatarDto) avatar).getType()).isEqualTo(AvatarType.PREDEFINED);
      return true;
    }));
  }

  @Test
  void shouldEnrichUploadedAvatar() {
    when(avatarStore.getAvatar(REPOSITORY)).thenReturn(Avatar.uploaded("fish".getBytes(), "png"));

    enricher.enrich(appender, REPOSITORY);

    verify(appender).appendEmbedded(eq("avatar"), (AvatarDto) argThat(dto -> {
      assertThat(((AvatarDto) dto).getLinks().getLinkBy("avatar").get().getHref())
        .isEqualTo("/scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/uploaded");
      assertThat(((AvatarDto) dto).getType()).isEqualTo(AvatarType.UPLOADED);
      return true;
    }));
  }


}
