/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.cloudogu.repositoryavatar;

import org.apache.shiro.subject.Subject;
import org.apache.shiro.util.ThreadContext;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Answers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import sonia.scm.api.v2.resources.HalAppender;
import sonia.scm.api.v2.resources.HalEnricherContext;
import sonia.scm.api.v2.resources.ScmPathInfoStore;
import sonia.scm.repository.Repository;
import sonia.scm.repository.RepositoryTestData;

import javax.inject.Provider;
import java.net.URI;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class RepositoryLinkEnricherTest {

  @Mock
  private Provider<ScmPathInfoStore> scmPathInfoStoreProvider;

  @InjectMocks
  private RepositoryLinkEnricher enricher;

  @Mock
  private HalEnricherContext context;
  @Mock
  private HalAppender appender;
  @Mock(answer = Answers.RETURNS_SELF)
  private HalAppender.LinkArrayBuilder linkArrayBuilder;
  @Mock
  private Subject subject;

  @BeforeEach
  void init() {
    ThreadContext.bind(subject);
  }

  @AfterEach
  void tearDown() {
    ThreadContext.unbindSubject();
  }

  @Test
  void shouldAppendAvatarLinks() {
    ScmPathInfoStore pathInfoStore = mock(ScmPathInfoStore.class);
    when(scmPathInfoStoreProvider.get()).thenReturn(pathInfoStore);
    when(pathInfoStore.get()).thenReturn(() -> URI.create("scm/api/"));
    when(appender.linkArrayBuilder("updateAvatar")).thenReturn(linkArrayBuilder);

    Repository repository = RepositoryTestData.createHeartOfGold();
    repository.setId("id-1");
    when(context.oneRequireByType(Repository.class)).thenReturn(repository);
    when(subject.isPermitted("repository:modify:id-1")).thenReturn(true);

    enricher.enrich(context, appender);

    verify(linkArrayBuilder, times(1)).append("autoGenerated", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/auto-generated");
    verify(linkArrayBuilder, times(1)).append("predefined", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/predefined");
    verify(linkArrayBuilder, times(1)).append("upload", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/uploaded");
  }

  @Test
  void shouldNotAppendAvatarLinks() {
    Repository repository = RepositoryTestData.createHeartOfGold();
    repository.setId("id-1");
    when(context.oneRequireByType(Repository.class)).thenReturn(repository);
    when(subject.isPermitted("repository:modify:id-1")).thenReturn(false);

    enricher.enrich(context, appender);

    verify(linkArrayBuilder, never()).append("autoGenerated", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/auto-generated");
    verify(linkArrayBuilder, never()).append("predefined", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/predefined");
    verify(linkArrayBuilder, never()).append("upload", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/uploaded");
  }
}
