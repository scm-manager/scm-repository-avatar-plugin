/*
 * Copyright (c) 2020 - present Cloudogu GmbH
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/.
 */

package com.cloudogu.repositoryavatar;

import org.apache.shiro.subject.Subject;
import org.apache.shiro.util.ThreadContext;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Answers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import sonia.scm.api.v2.resources.HalAppender;
import sonia.scm.api.v2.resources.HalEnricherContext;
import sonia.scm.api.v2.resources.ScmPathInfoStore;
import sonia.scm.repository.Repository;
import sonia.scm.repository.RepositoryTestData;

import jakarta.inject.Provider;
import java.net.URI;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class RepositoryLinkEnricherTest {

  @Mock
  private Provider<ScmPathInfoStore> scmPathInfoStoreProvider;

  @InjectMocks
  private RepositoryLinkEnricher enricher;

  @Mock
  private HalEnricherContext context;
  @Mock
  private HalAppender appender;
  @Mock(answer = Answers.RETURNS_SELF)
  private HalAppender.LinkArrayBuilder linkArrayBuilder;
  @Mock
  private Subject subject;

  @BeforeEach
  void init() {
    ThreadContext.bind(subject);
  }

  @AfterEach
  void tearDown() {
    ThreadContext.unbindSubject();
  }

  @Test
  void shouldAppendAvatarLinks() {
    ScmPathInfoStore pathInfoStore = mock(ScmPathInfoStore.class);
    when(scmPathInfoStoreProvider.get()).thenReturn(pathInfoStore);
    when(pathInfoStore.get()).thenReturn(() -> URI.create("scm/api/"));
    when(appender.linkArrayBuilder("updateAvatar")).thenReturn(linkArrayBuilder);

    Repository repository = RepositoryTestData.createHeartOfGold();
    repository.setId("id-1");
    when(context.oneRequireByType(Repository.class)).thenReturn(repository);
    when(subject.isPermitted("repository:modify:id-1")).thenReturn(true);

    enricher.enrich(context, appender);

    verify(linkArrayBuilder, times(1)).append("autoGenerated", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/auto-generated");
    verify(linkArrayBuilder, times(1)).append("predefined", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/predefined");
    verify(linkArrayBuilder, times(1)).append("upload", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/uploaded");
  }

  @Test
  void shouldNotAppendAvatarLinks() {
    Repository repository = RepositoryTestData.createHeartOfGold();
    repository.setId("id-1");
    when(context.oneRequireByType(Repository.class)).thenReturn(repository);
    when(subject.isPermitted("repository:modify:id-1")).thenReturn(false);

    enricher.enrich(context, appender);

    verify(linkArrayBuilder, never()).append("autoGenerated", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/auto-generated");
    verify(linkArrayBuilder, never()).append("predefined", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/predefined");
    verify(linkArrayBuilder, never()).append("upload", "scm/api/v2/repository-avatar/hitchhiker/HeartOfGold/uploaded");
  }
}
