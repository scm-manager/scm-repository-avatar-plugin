/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.cloudogu.repositoryavatar;

import com.google.common.io.ByteStreams;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.input.BoundedInputStream;
import org.jboss.resteasy.plugins.providers.multipart.InputPart;
import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataInput;
import sonia.scm.ScmConstraintViolationException.Builder;
import sonia.scm.api.v2.resources.ErrorDto;
import sonia.scm.repository.NamespaceAndName;
import sonia.scm.repository.Repository;
import sonia.scm.repository.RepositoryManager;
import sonia.scm.repository.RepositoryPermissions;
import sonia.scm.web.VndMediaType;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.StreamingOutput;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import static com.cloudogu.repositoryavatar.Images.scaleImage;
import static com.cloudogu.repositoryavatar.Images.shouldScale;
import static sonia.scm.ContextEntry.ContextBuilder.entity;
import static sonia.scm.NotFoundException.notFound;

@OpenAPIDefinition(tags = {
  @Tag(name = "RepositoryAvatar", description = "Repository avatar related endpoints")
})
@Path("v2/repository-avatar")
public class AvatarResource {

  static final String MEDIA_TYPE = VndMediaType.PREFIX + "repository-avatar" + VndMediaType.SUFFIX;
  private static final int _5_MB = 5000000;

  private final RepositoryManager repositoryManager;
  private final AvatarStore avatarStore;

  @Inject
  AvatarResource(RepositoryManager repositoryManager, AvatarStore uploadedAvatarStore) {
    this.repositoryManager = repositoryManager;
    this.avatarStore = uploadedAvatarStore;
  }

  @POST
  @Path("{namespace}/{name}/auto-generated")
  @Operation(summary = "Updates repository avatar to auto-generated", description = "Updates the repository avatar to auto-generated", tags = "RepositoryAvatar")
  @ApiResponse(responseCode = "204", description = "Avatar was updated successfully")
  @ApiResponse(responseCode = "401", description = "not authenticated / invalid credentials")
  @ApiResponse(responseCode = "403", description = "not authorized / missing permission to modify repository")
  @ApiResponse(
    responseCode = "500",
    description = "internal server error",
    content = @Content(
      mediaType = VndMediaType.ERROR_TYPE,
      schema = @Schema(implementation = ErrorDto.class)
    ))
  public void updateAutoGeneratedAvatar(@PathParam("namespace") String namespace, @PathParam("name") String name) {
    Repository repository = repositoryManager.get(new NamespaceAndName(namespace, name));
    RepositoryPermissions.modify(repository).check();
    avatarStore.saveAvatar(repository, Avatar.autoGenerated());
  }

  @POST
  @Consumes(MEDIA_TYPE)
  @Path("{namespace}/{name}/predefined")
  @Operation(summary = "Save predefined avatar for repository", description = "Saves and updates the repository avatar by the selected options", tags = "RepositoryAvatar")
  @ApiResponse(responseCode = "204", description = "Avatar was updated successfully")
  @ApiResponse(responseCode = "401", description = "not authenticated / invalid credentials")
  @ApiResponse(responseCode = "403", description = "not authorized / missing permission to modify repository")
  @ApiResponse(
    responseCode = "500",
    description = "internal server error",
    content = @Content(
      mediaType = VndMediaType.ERROR_TYPE,
      schema = @Schema(implementation = ErrorDto.class)
    ))
  public void updatePredefinedAvatar(@PathParam("namespace") String namespace, @PathParam("name") String name, AvatarDto dto) {
    Repository repository = repositoryManager.get(new NamespaceAndName(namespace, name));
    RepositoryPermissions.modify(repository).check();
    avatarStore.saveAvatar(repository, Avatar.predefined(dto.getIconName(), dto.getColor()));
  }

  @POST
  @Consumes(MediaType.MULTIPART_FORM_DATA)
  @Path("{namespace}/{name}/uploaded")
  @Operation(summary = "Saves and select avatar for repository", description = "Save and select uploaded avatar as the repository avatar", tags = "RepositoryAvatar")
  @ApiResponse(responseCode = "204", description = "Avatar was uploaded successfully")
  @ApiResponse(responseCode = "400", description = "Uploaded file format invalid or file too large")
  @ApiResponse(responseCode = "401", description = "not authenticated / invalid credentials")
  @ApiResponse(responseCode = "403", description = "not authorized / missing permission to modify repository")
  @ApiResponse(
    responseCode = "500",
    description = "internal server error",
    content = @Content(
      mediaType = VndMediaType.ERROR_TYPE,
      schema = @Schema(implementation = ErrorDto.class)
    ))
  public void uploadAvatar(@PathParam("namespace") String namespace, @PathParam("name") String name, MultipartFormDataInput input) throws IOException {
    Repository repository = repositoryManager.get(new NamespaceAndName(namespace, name));
    RepositoryPermissions.modify(repository).check();
    InputPart file = input.getFormDataMap().get("file").get(0);
    Builder.doThrow().violation("Invalid file format").when(!file.getMediaType().getType().equals("image"));
    InputStream lis = ByteStreams.limit(file.getBody(InputStream.class, null), _5_MB + 1);
    byte[] imageBytes = IOUtils.toByteArray(lis);
    Builder.doThrow().violation("File too large").when(imageBytes.length > _5_MB);
    if (shouldScale(file.getMediaType())) {
      imageBytes = scaleImage(imageBytes, file.getMediaType().getSubtype());
    }
    avatarStore.saveAvatar(repository, Avatar.uploaded(imageBytes, file.getMediaType().toString()));
  }

  @GET
  @Produces(MEDIA_TYPE)
  @Path("{namespace}/{name}/uploaded")
  @Operation(summary = "Returns uploaded avatar for repository", description = "Returns the uploaded avatar for the repository", tags = "RepositoryAvatar")
  @ApiResponse(responseCode = "200", description = "success")
  @ApiResponse(responseCode = "401", description = "not authenticated / invalid credentials")
  @ApiResponse(
    responseCode = "500",
    description = "internal server error",
    content = @Content(
      mediaType = VndMediaType.ERROR_TYPE,
      schema = @Schema(implementation = ErrorDto.class)
    ))
  public Response getUploadedAvatar(@PathParam("namespace") String namespace, @PathParam("name") String name) {
    Repository repository = repositoryManager.get(new NamespaceAndName(namespace, name));
    RepositoryPermissions.read(repository).check();
    Avatar avatar = avatarStore.getAvatar(repository);

    if (avatar == null || avatar.getImage() == null) {
      throw notFound(entity(Avatar.class, new NamespaceAndName(namespace, name).toString()));
    }

    StreamingOutput streamingOutput = os -> {
      os.write(avatar.getImage());
      os.flush();
    };

    return Response
      .ok(streamingOutput, avatar.getMediaType())
      .header("content-disposition", "attachment; filename =avatar")
      .build();
  }
}
