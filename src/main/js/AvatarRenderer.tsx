/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import { FC } from "react";
import { HalRepresentation, Link, Repository } from "@scm-manager/ui-types";
import React from "react";
import AutoGeneratedAvatar from "./autogenerated/AutoGeneratedAvatar";
import PredefinedAvatar from "./predefined/PredefinedAvatar";
import { Avatar } from "./avatars";
import UploadedAvatar from "./uploaded/UploadedAvatar";
import styled from "styled-components";

const AvatarWrapper = styled.div`
  border-radius: 5px;
`;

type Props = {
  repository: Repository;
};

const AvatarRenderer: FC<Props> = ({ repository }) => {
  const renderAvatar = () => {
    const avatar = repository?._embedded?.avatar as Avatar;

    if (avatar.type === "PREDEFINED") {
      return <PredefinedAvatar avatar={avatar} />;
    } else if (avatar.type === "UPLOADED") {
      return (
        <UploadedAvatar imageLink={((repository?._embedded?.avatar as HalRepresentation)._links.avatar as Link).href} />
      );
    }

    return <AutoGeneratedAvatar repository={repository} />;
  };

  return <AvatarWrapper>{renderAvatar()}</AvatarWrapper>;
};

export default AvatarRenderer;
