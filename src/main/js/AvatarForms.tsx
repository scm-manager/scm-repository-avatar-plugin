/*
 * MIT License
 *
 * Copyright (c) 2020-present Cloudogu GmbH and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import { Repository, File } from "@scm-manager/ui-types";
import React, { FC } from "react";
import AutoGeneratedAvatar from "./autogenerated/AutoGeneratedAvatar";
import PredefinedAvatarSelector from "./predefined/PredefinedAvatarSelector";
import styled from "styled-components";
import AvatarUploader from "./uploaded/AvatarUploader";
import AvatarPreview from "./predefined/AvatarPreview";
import { AvatarType } from "./avatars";

const Wrapper = styled.div`
  margin: 1em 0;
  padding: 1em;
  border: #f5f5f5 1px solid;
  border-radius: 5px;
  min-height: 140px;
`;

type Props = {
  repository: Repository;
  avatarType: AvatarType;
  icon: string;
  setIcon: (icon: string) => void;
  color: string;
  setColor: (color: string) => void;
  file: File;
  setFile: (file: File) => void;
};

const AvatarForms: FC<Props> = ({ repository, avatarType, icon, setIcon, color, setColor, file, setFile }) => {
  const disabled = !repository?._links.updateAvatar;

  let avatar;
  switch (avatarType) {
    case "AUTO_GENERATED":
      avatar = <AvatarPreview avatar={<AutoGeneratedAvatar repository={repository} />} />;
      break;
    case "PREDEFINED":
      avatar = (
        <PredefinedAvatarSelector icon={icon} color={color} setColor={setColor} setIcon={setIcon} disabled={disabled} />
      );
      break;
    case "UPLOADED":
      avatar = <AvatarUploader repository={repository} file={file} setFile={setFile} disabled={disabled} />;
      break;
  }

  return <Wrapper className="is-clipped">{avatar}</Wrapper>;
};

export default AvatarForms;
